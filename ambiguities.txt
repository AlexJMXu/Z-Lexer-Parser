Formatted with ***Markdown***

### Aggregate Datatype Nesting
* It was not specified whether you could have dictionaries nested in dictionaries, similarly for sequences, or allowing to nest them interchangeably. We assume that they are since such constructs are possible in various popular programming languages, such as Java.
  * For example, we assume that `dict<dict<int,int>,int>  x = {[1,2]:[1,2]};` is valid
  * `seq<seq<int>> x = [[1,2],[1,2]];` is valid
  *  `dict<seq<int>, seq<char>> x = {[4,2]:['c','b']};` is valid (the equivalent in Java using ArrayList and HashMap is valid. See https://ideone.com/yrqyCb)

### Reserved Keywords
The language specification does not discuss reserved keywords. We assume that keywords like `int`, `dict`, `alias`, `print` are reserved keywords, meaning that they cannot be used as names for identifiers.

### Top

* In the Z specification language, top was defined in seq/dict but was not mentioned whether or not it could be used as a normal assignment (e.g. `top a = 5;`). If assignment were allowed, it would make all data types pointless, and the compiler would not be able to determine what type it is dealing with.
  Therefore `top a = 5;` is invalid
* `seq<top> s = [1, 1/2, 3.14, ['f', 'o', 'u', 'r'] ];` is valid, since `['f', 'o', 'u', 'r']` is of type **seq<char>** which is a type of **top**
* `dict<int,top> d = {1:1, 2:'c', 7:3/5, 3:{1:T}};`is valid. `{1:T}` is of type **top**, however it would give a semantic error in the semantic analysis, as we do not know the individual types of the key and value of that nested dictionary, since it is never defined

### Rationals

Rationals have to strictly follow the grammar of:

```
rational_number ::= integer_number SLASH integer_number
                  | integer_number UNDERSCORE integer_number SLASH integer_number
                  ;
```

As a result `rat a = (2)_3/2;` is invalid. Otherwise, one would be able to make computations while declaring a new variable.

### Illegal Characters

We are assuming that only the ASCII single quote `'` is valid. Characters such as `â€™` will are illegal and are rejected by the Lexer

### If Else empty bodies

We assume that the bodies of `if` and `else` and `elif` are allowed to have empty bodies.

For example:

```
main {
    if ( i < 2 ) then
    else
    elif(i >= 2)
    fi
};
```

is valid